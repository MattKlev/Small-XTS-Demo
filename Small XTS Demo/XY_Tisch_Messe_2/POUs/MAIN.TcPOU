<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.6">
  <POU Name="MAIN" Id="{e0508b3d-df73-4065-9cac-4f13ffbfbebb}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	stAchse1				:Axis_Ref;			//Ansteuerung Achse1 Motor
	stAchse2				:Axis_Ref;			//Ansteuerung Achse2 Motor
	stAchseMaster			:Axis_Ref;			//Master Achse Kurvenscheibe	
	
	bStart					:BOOL:= FALSE;
	nStatus					:UINT:= 0;

	lrSollPosAchse1			:LREAL;
	lrSollPosAchse2			:LREAL;
	lrSollPosAchseMaster	:LREAL;
	
	diIstPosAchse1			:DINT;
	diIstPosAchse2			:DINT;
	diSollPosAchse1			:DINT;
	diSollPosAchse2			:DINT;		
	diKurvePosAchse1		:DINT;
	diKurvePosAchse2		:DINT;
	diStopPosAchse1			:DINT;
	diStopPosAchse2			:DINT;
	
	lrDiffA1A2				:LREAL;

(*------------------- Trigger -------------------*)

	fbStartTrigger			:R_TRIG;
		bStartTrigger		:BOOL;
	fbKurveTrigger			:R_TRIG;
		bKurveTrigger		:BOOL;
	fbKurveStopTrigger		:R_TRIG;
		bKurveStopTrigger	:BOOL;
	fbTrigButton			:R_TRIG;
		//bStop				:BOOL;
		//fbTrigStart		:R_TRIG;
		//bStartTrig		:BOOL;
(*------------------- Timer -------------------*)
	
	fbKurveTimer			:TON;
		bKurveTimer			:BOOL;

	fbKurveTimerStatus0		:TON;
		bKurveTimerStatus0	:BOOL;
		
	fbKurveTimerStop		:TON;
		bKurveTimerStop	:BOOL;
		
(*---------------- Master Achse ---------------*)

	fbPowerMaster			:MC_Power;
		bPowerEnableMaster	:BOOL:= FALSE;
	
	fbResetMaster			:MC_Reset;
		bResetMaster		:BOOL;	
		
	fbMoveMaster			:MC_MoveAbsolute;
		bMoveExecuteMaster	:BOOL;
		lrMoveVeloMaster	:LREAL:=30;
		iMoveVeloMaster		:INT:=1;
				
	fbHaltMaster			:MC_Stop;
		bHaltMaster			:BOOL;
	
	fbSetPosMaster			:MC_SetPosition;
		bSetPosMaster		:BOOL;

(*---------------- Achse 1 ---------------*)

	fbPowerA1				:MC_Power;
		bPowerEnableA1		:BOOL:= FALSE;
	
	fbResetA1				:MC_Reset;
		bResetA1			:BOOL:= FALSE;	
		
	fbHaltA1				:MC_Stop;
		bHaltA1				:BOOL:= FALSE;
		
	fbMoveA1				:MC_MoveAbsolute;
		bMoveExecuteA1		:BOOL:= FALSE;

	
	fbKurveA1				:MC_CamIn;
		bKurveExecuteA1		:BOOL:= FALSE;

	fbKurveOutA1			:MC_CamOut;
		bKurveOutA1			:BOOL:= FALSE;	

(*---------------- Achse 2 ---------------*)
	fbPowerA2				:MC_Power;
		bPowerEnableA2		:BOOL:= FALSE;
		
	fbResetA2				:MC_Reset;
		bResetA2			:BOOL:= FALSE;

	fbHaltA2				:MC_Stop;
		bHaltA2				:BOOL:= FALSE;
		
	fbMoveA2				:MC_MoveAbsolute;
		bMoveExecuteA2		:BOOL:= FALSE;
		
		
	fbKurveA2				:MC_CamIn;
		bKurveExecuteA2		:BOOL:= FALSE;
	
	fbKurveOutA2			:MC_CamOut;
		bKurveOutA2			:BOOL:= FALSE;	
		


		
		
	iReset		: INT;
	
	
	fbReadStatus1	: MC_ReadStatus;
	fbReadStatus2	: MC_ReadStatus;

	TonReset		: TOn;
		
	bStartupDone	: BOOL;	
	
	TON1			: Ton;
	nLight			: INT;
	fbLightTon		: Ton;
	
	bSimulation		: BOOL;
	
	fbSetPos : ARRAY [1..2] OF MC_SetPosition;
	fbStartTimer: TON;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// if you want to use start/stop trigger set nStatus to 900 in line 89 and 
fbStartTimer(In:= TRUE, PT:= T#1S);
IF fbStartTimer.Q THEN
IF bSimulation THEN
	fbSetPos[1]( 	Axis 	:= stAchse1,
					Execute := TRUE,
					Position:= 100);
	fbSetPos[2]( 	Axis 	:= stAchse2,
					Execute := TRUE,
					Position:= 250);
		
	IF fbSetPos[1].Done AND fbSetPos[2].Done THEN
		bSimulation := FALSE;
	END_IF
ELSE

fbTrigButton(CLK:=bButton);
IF fbTrigButton.Q AND (nStatus = 900) THEN
	nStatus:= 910;
ELSIF fbTrigButton.Q AND NOT (nStatus = 900) THEN
	nStatus:= 130;
END_IF



// LED 

//bRedLight := TRUE;

IF (nStatus > 100) AND (nStatus < 900) THEN
	
		bGreenLight := TRUE;
	ELSIF (nStatus = 900) THEN
		
		CASE nLight OF
			0: fbLightTon(In:=TRUE, PT:= T#0.5S);
				IF 	fbLightTon.Q THEN
					fbLightTon(In:=FALSE);
					bGreenLight := TRUE;
					nLight :=1;
				END_IF
		
			1: 	fbLightTon(In:=TRUE, PT:= T#0.5S);
				IF 	fbLightTon.Q THEN
					fbLightTon(In:=FALSE);
					bGreenLight := FALSE;
					nLight :=0;
				END_IF		
		END_CASE

END_IF

lrDiffA1A2:=stAchse2.NcToPlc.ActPos-stAchse1.NcToPlc.ActPos;

diIstPosAchse1:=REAL_TO_DINT(stAchse1.NcToPlc.ActPos);
diIstPosAchse2:=REAL_TO_DINT(stAchse2.NcToPlc.ActPos);


(* Positionsfehler *)
IF fbPowerA1.Status = TRUE  AND fbPowerA2.Status = TRUE  AND bStart = TRUE THEN
	IF stAchse2.NcToPlc.ActPos >= 470 OR stAchse1.NcToPlc.ActPos <= 30 OR lrDiffA1A2 >= 180 OR lrDiffA1A2 <= 57 THEN		
		bHaltMaster:=TRUE;
		bHaltA1:=TRUE;
		bHaltA2:=TRUE;
		bPowerEnableA1 := FALSE;
	  	bPowerEnableA2 := FALSE;
		nStatus :=200;
	END_IF
END_IF
	
CASE nStatus OF

0:	(* Inaktiver Zustand *)

	IF fbStartTrigger.Q = TRUE OR bStart = FALSE THEN
		bStart:=TRUE;
	//	bPowerEnableA1 := TRUE;
	//	bPowerEnableA2 := TRUE;
		nStatus := 11;
	END_IF
												
	IF fbKurveTrigger.Q = TRUE THEN	
		nStatus := 100;
	END_IF
	
	IF fbKurveStopTrigger.Q = TRUE THEN	
		nStatus := 120;
	END_IF

	

(*------------------- Achsenregler setzten ----------------------*)

11: IF (stAchse1.NcToPlc.ActPos <> 0) AND (stAchse2.NcToPlc.ActPos<>0) THEN 
		nStatus := 12;	
	END_IF


12:	(*Reset of All Axis*)	
		bResetMaster:=TRUE;
		bResetA1:= TRUE;
		bResetA2:= TRUE;
		
	IF fbResetA1.done  AND fbResetA2.done AND fbResetMaster.Done THEN					
		bResetMaster:=FALSE;
		bResetA1:= FALSE;
		bResetA2:= FALSE;
	//	bPowerEnableA1 := TRUE;
	//	bPowerEnableA2 := TRUE;
		nStatus := 100;
	END_IF

13:	(*Power Mover 1 and 2*)	
	IF fbPowerA1.Status = TRUE AND fbPowerA2.Status = TRUE THEN	
		nStatus := 100;
	END_IF
	IF fbPowerA1.Error = TRUE OR fbPowerA2.Error = TRUE THEN
		bPowerEnableA1 := FALSE;
		bPowerEnableA2 := FALSE;
		nStatus:=12;		
	END_IF

(*-------------------Start Cam-Table----------------------*)
	
100: 
	bStartupDone:=TRUE;
	bKurveTimer:=FALSE;
 (*Set Master Axis to Start Position*)
	bSetPosMaster:=TRUE;
	IF fbSetPosMaster.Done = TRUE THEN
		bSetPosMaster:=FALSE;
		nStatus:=900;
		
		// if you want to use start/stop set nstatus to 900 to wait for the start trigger
	END_IF	


101: (*Move Movers to Cam-Table Start Position*)
	lrSollPosAchse1:=100;
	lrSollPosAchse2:=200;
	bMoveExecuteA1:=TRUE;
	bMoveExecuteA2:=TRUE;
	IF diIstPosAchse1 = 100 AND diIstPosAchse2 = 200 THEN
		IF fbMoveA1.done = TRUE AND fbMoveA2.done = TRUE THEN
			bMoveExecuteA1:=FALSE;
			bMoveExecuteA2:=FALSE;
			nStatus :=102;
		END_IF
	END_IF
		
102: (* Cam In *)	
	bKurveExecuteA1:=TRUE;
	bKurveExecuteA2:=TRUE;
	IF fbKurveA1.InSync = TRUE AND fbKurveA2.InSync = TRUE THEN
		bKurveExecuteA1:=FALSE;
		bKurveExecuteA2:=FALSE;
		nStatus:= 103;
	END_IF

103:(* Enable Master Axis *)	
	bPowerEnableMaster:=TRUE;
	IF fbPowerMaster.Status = TRUE THEN
		bMoveExecuteMaster:=FALSE;
		nStatus:=104;
	END_IF
	
104:(* Choose Velocity 1/2 *)
	IF iMoveVeloMaster >=2 THEN 
		lrMoveVeloMaster:=1000;
		iMoveVeloMaster:=1;
		nStatus:= 105;
	ELSE
		lrMoveVeloMaster:=750;	
		iMoveVeloMaster:=iMoveVeloMaster+1;
		nStatus:= 105;
	END_IF
	
105: (* Move the Master Axis *)
	lrSollPosAchseMaster:=20000;
	bMoveExecuteMaster:=TRUE;
			
	IF fbMoveMaster.Done =TRUE THEN
		nStatus:=120;
	END_IF


(*-----------------------Kurvenscheibe stoppen-----------------------*)

120: (* Master Halt *)
	bHaltMaster:=TRUE;
	IF fbHaltMaster.Done = TRUE THEN
		nStatus:=121;
	END_IF
	
121: (* Master Halt *)
	bHaltA1:=TRUE;
	bHaltA2:=TRUE;
	IF fbHaltA2.Done = TRUE AND fbHaltA1.Done=TRUE THEN
		nStatus:=122;
	END_IF
	
122: (* Set Master Axis to Start Position*)
	bSetPosMaster:=TRUE;
	IF fbSetPosMaster.Done = TRUE THEN
		bSetPosMaster:=FALSE;
		nStatus:=123;
	END_IF	
	
123:
	bKurveTimerStop:=TRUE;
	IF fbKurveTimerStop.Q =TRUE THEN
			bKurveTimerStop:=FALSE;
			bHaltMaster:=FALSE;
			bHaltA1:=FALSE;
			bHaltA2:=FALSE;
			nStatus:=14;			
		ELSE
			nStatus:=124;
			bKurveTimerStop:=FALSE;	
		END_IF
		
		bKurveOutA2 := FALSE;
		bKurveOutA1	:= FALSE;
		
124 : 	(*Cam Out of the MAster Axis*)

		bKurveOutA2 := TRUE;
		bKurveOutA1	:= TRUE;
		bHaltA1:= FALSE;
		bHaltA2:= FALSE;
		bHaltMaster:=FALSE;
		
		IF fbKurveOutA2.Done AND fbKurveOutA1.Done THEN
			TON1(in:= TRUE, PT:=T#1S);
			IF TOn1.Q THEN
				Ton1(in:=FALSE);
				nStatus :=101; 
			END_IF
			
		END_IF
130: (* Master Halt *)
	bHaltMaster:=TRUE;
	IF fbHaltMaster.Done = TRUE THEN
		nStatus:=131;
	END_IF
	
131: (* Master Halt *)
	bHaltA1:=TRUE;
	bHaltA2:=TRUE;
	IF fbHaltA2.Done = TRUE AND fbHaltA1.Done=TRUE THEN
		nStatus:=132;
	END_IF
	
132: (* Set Master Axis to Start Position*)
	bSetPosMaster:=TRUE;
	IF fbSetPosMaster.Done = TRUE THEN
		bSetPosMaster:=FALSE;
		nStatus:=133;
	END_IF	
	
133:
	bKurveTimerStop:=TRUE;
	IF fbKurveTimerStop.Q =TRUE THEN
			bKurveTimerStop:=FALSE;
			bHaltMaster:=FALSE;
			bHaltA1:=FALSE;
			bHaltA2:=FALSE;
			nStatus:=14;			
		ELSE
			nStatus:=134;
			bKurveTimerStop:=FALSE;	
		END_IF
		
		bKurveOutA2 := FALSE;
		bKurveOutA1	:= FALSE;
		
134 : 	bKurveOutA2 := TRUE;
		bKurveOutA1	:= TRUE;
		bHaltA1:= FALSE;
		bHaltA2:= FALSE;
		bHaltMaster:=FALSE;
		
		IF fbKurveOutA2.Done AND fbKurveOutA1.Done THEN
			TON1(in:= TRUE, PT:=T#100MS);
			IF TOn1.Q THEN
				Ton1(in:=FALSE);
				
				// If stop Trigger ist used wait for Starttrigger in nCase 900
				nStatus :=135; 
			END_IF
			
		END_IF
		
		
135: 	bPowerEnableMaster:=FALSE;
		bPowerEnableA1:=FALSE;
		bPowerEnableA2:=FALSE;
		
		IF NOT fbPowerA1.Status AND NOT fbPowerA2.Status THEN
			nStatus := 900;
		END_IF
	
		
900: 	

910: 	bPowerEnableMaster	:=TRUE;
		bPowerEnableA1		:=TRUE;
		bPowerEnableA2		:=TRUE;
		bResetA1:= FALSE;
		bResetA2:= FALSE;
		bMoveExecuteA1:=FALSE;
		bMoveExecuteA2:=FALSE;
		IF fbPowerA1.Status AND fbPowerA2.Status AND fbPowerMaster.Status THEN
			nStatus := 101;
		END_IF
		
		
		
		
		
		
(*---------------Stopp und Nothalt------------------*)

200: (* Nothalt Bedingung überprüfen *)
	bPowerEnableMaster:=FALSE;
	bPowerEnableA1:=FALSE;
	bPowerEnableA2:=FALSE;
	IF bPowerEnableA1 = FALSE AND bPowerEnableA2 = FALSE THEN
		IF stAchse2.NcToPlc.ActPos <= 450 OR stAchse1.NcToPlc.ActPos >= 50 OR lrDiffA1A2 <= 160 OR lrDiffA1A2 >= 80 THEN	
			//nStatus :=10;
		END_IF
	END_IF
END_CASE

(*------------ Funktionen ----------*)

(*------------ Trigger ----------*)
fbStartTrigger(CLK:=bStartTrigger , Q=> );
fbKurveTrigger(CLK:=bKurveTrigger , Q=> );
fbKurveStopTrigger(CLK:=bKurveStopTrigger , Q=> );

(*------------ Timer ----------*)
fbKurveTimer(IN := bKurveTimer , PT := T#4S);
fbKurveTimerStatus0(IN := bKurveTimerStatus0 , PT := T#2S);
fbKurveTimerStop(IN := bKurveTimerStop , PT := T#500MS);

(*---------- Master Achse --------*)
fbResetMaster(
	Execute:= bResetMaster,
	Axis:= stAchseMaster);
	
(* Regler Freigabe *)
fbPowerMaster(
	Enable:=bPowerEnableMaster, 
	Enable_Positive:=bPowerEnableMaster ,
	Enable_Negative:= bPowerEnableMaster,
	BufferMode:= MC_Aborting,
	Axis:=stAchseMaster);
	
(* Move *)	
fbMoveMaster(
	Axis:=stAchseMaster,
	Execute:= bMoveExecuteMaster,
	Position:= lrSollPosAchseMaster,
	Velocity:=lrMoveVeloMaster,
	Acceleration:=15000 ,
	Deceleration:=15000 ,
	Jerk:= 30000 );

(* Halt *)
fbHaltMaster(
	Axis:=stAchseMaster,
	Execute:= bHaltMaster,
	Deceleration:=35000 ,
	Jerk:=1000000 );
	
(* Master Achse Position setzten *)	
fbSetPosMaster(
	Axis:=stAchseMaster,
	Execute:=bSetPosMaster,
	Position:=89 );
	
(*---------- Achse 1 --------*)
(* Achsen-Reset *)
fbResetA1(
	Execute:= bResetA1,
	Axis:= stAchse1);
	
(* Regler Freigabe *)
fbPowerA1(
	Enable:=bPowerEnableA1, 
	Enable_Positive:=bPowerEnableA1 ,
	Enable_Negative:= bPowerEnableA1,
	BufferMode:= MC_Aborting,
	Axis:=stAchse1);

(* Achsen-Halt *)
fbHaltA1(
	Execute:= bHaltA1,
	Axis:= stAchse1);
	
(* Move *)	
fbMoveA1(
	Axis:=stAchse1,
	Execute:= bMoveExecuteA1,
	Position:= lrSollPosAchse1,
	Velocity:=100,
	Acceleration:=35000 ,
	Deceleration:=35000 ,
	Jerk:=1000000,
	BufferMode:=MC_Aborting  	);

(* Kurvenscheibe Kopplung*)
fbKurveA1(
	Master:=stAchseMaster,
	Slave:=stAchse1,
	Execute:=bKurveExecuteA1,
	MasterOffset:=0,
	SlaveOffset:=0,
	StartMode:= MC_STARTMODE_ABSOLUTE,
	CamTableID:=1);
	
(* Kurvenscheibe Kopplung aufheben *)
fbKurveOutA1(
	Slave:=stAchse1,
	Execute:=bKurveOutA1);
	
	
(*---------- Achse  2--------*)
(* Achsen-Reset *)
fbResetA2 (
	Execute:= bResetA2,
	Axis:= stAchse2);
	
(* Regler Freigabe *)
fbPowerA2(
	Enable:=bPowerEnableA2,
	Enable_Positive:=bPowerEnableA2 ,
	Enable_Negative:= bPowerEnableA2,
	BufferMode:= MC_Aborting,
	Axis:=stAchse2);

(* Achsen-Halt *)
fbHaltA2(
	Execute:= bHaltA2,
	Axis:= stAchse2);
	
(* Move *)
fbMoveA2(
	Axis:=stAchse2,
	Execute:= bMoveExecuteA2,
	Position:= lrSollPosAchse2,
	Velocity:=100,
	Acceleration:=35000 ,
	Deceleration:=35000 ,
	Jerk:=1000000,
	BufferMode:=MC_Aborting 	);
	
(* Kurvenscheibe *)
fbKurveA2(
	Master:=stAchseMaster,
	Slave:=stAchse2,
	Execute:=bKurveExecuteA2,
	MasterOffset:=0,
	SlaveOffset:=0,
	StartMode:= MC_STARTMODE_ABSOLUTE,
	CamTableID:=2);
	
(* Kurvenscheibe Kopplung aufheben *)	
fbKurveOutA2(
	Slave:=stAchse2,
	Execute:=bKurveOutA2);
		


	
//----------------------------Change Tobias Ax Reset

CASE iReset OF
	
0: IF bStartupDone AND (fbReadStatus1.Error OR fbReadStatus2.Error) THEN
	

		iReset:=10;
		nStatus:=500;
	END_IF

	
	
10:	TonReset(In:=TRUE, PT:= T#2S);

	IF TonReset.Q THEN
		iReset:= 15;
		TonReset(In:=FALSE);
	END_IF
	
15:
		iReset:=20;

	
17: bResetA1:= FALSE;
	bResetA2:= FALSE;

	
	iReset:=20;
	
20: bResetA1:=	TRUE;
	bResetA2:=	TRUE;
	
	nStatus:=500;
	IF fbResetA1.Done AND fbResetA2.Done  THEN
		bResetA1:=FALSE;
		bResetA2:=FALSE;
	
		
		bMoveExecuteA1 :=FALSE;
		bMoveExecuteA2 :=FALSE;
		
		TonReset(IN:=TRUE, PT:=T#1S);
		iReset:=30;
	END_IF
	
30: TonReset();
	IF TonReset.Q THEN
		TonReset(In:=FALSE);
		nStatus:=100;
		iReset:=0;
	END_IF

END_CASE


//---------Read Axis State

fbReadStatus1(
	Axis:=stAchse1 , 
	Enable:= TRUE);
	
fbReadStatus2(
	Axis:=stAchse1 , 
	Enable:= TRUE);
	
END_IF
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>