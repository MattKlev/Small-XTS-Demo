{
    "CHUNKSIZE": 1048576,
    "COMPRESSION": true,
    "TIMEOUT": "PT5S",
    "scopeConfigs": {
        "Scope": {
            "AUTOSTART_RECORD": true,
            "CONFIG_FILE": "﻿<?xml version="1.0" encoding="utf-8"?>
<ScopeProject AssemblyName="TwinCAT.Measurement.Scope.API.Model">
  <AutoDeleteCapacity>0</AutoDeleteCapacity>
  <AutoDeleteMode>Disabled</AutoDeleteMode>
  <AutoDeleteOlderThan>0</AutoDeleteOlderThan>
  <AutoRestartRecord>false</AutoRestartRecord>
  <AutoSaveExportConfigurationString>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;ExportConfiguration&gt;
  &lt;Silent&gt;False&lt;/Silent&gt;
  &lt;Format_Properties&gt;
    &lt;CSVProperties&gt;
    &lt;/CSVProperties&gt;
  &lt;/Format_Properties&gt;
&lt;/ExportConfiguration&gt;
</AutoSaveExportConfigurationString>
  <AutoSaveFileNameMask>{SCOPE}_AutoSave_{HH_mm_ss}</AutoSaveFileNameMask>
  <AutoSaveMode>None</AutoSaveMode>
  <AutoSavePath>$ScopeProject$\AutoSave</AutoSavePath>
  <Comment />
  <DisplayColor>Black</DisplayColor>
  <Guid>bb6f44d5-8163-498f-b965-4d727c718c0b</Guid>
  <HeadlessServer />
  <HeadlessServerConnectionId>00000000-0000-0000-0000-000000000000</HeadlessServerConnectionId>
  <ImageAutoDeleteCapacity>0</ImageAutoDeleteCapacity>
  <ImageAutoDeleteOlderThan>0</ImageAutoDeleteOlderThan>
  <ImagesDeleteMode>Disabled</ImagesDeleteMode>
  <KeepPreviousExports>true</KeepPreviousExports>
  <KeepPreviousImageExports>true</KeepPreviousImageExports>
  <Layout>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;Layout&gt;
  &lt;Window Guid="d79b11fa-816b-47d6-8191-53d5ea669467" LastFocused="133270924265208309" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="bbc481d5-5bc4-420e-9e59-55c80fcb710c" DocumentIndexInWindowGroup="0" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;DocumentContainer Dock="5"&gt;
    &lt;SplitLayoutSystem WorkingSize="250, 400" SplitMode="0"&gt;
      &lt;ControlLayoutSystem WorkingSize="250, 400" Guid="bbc481d5-5bc4-420e-9e59-55c80fcb710c" Collapsed="0" SelectedControl="d79b11fa-816b-47d6-8191-53d5ea669467"&gt;
        &lt;Controls&gt;
          &lt;Control Guid="d79b11fa-816b-47d6-8191-53d5ea669467" /&gt;
        &lt;/Controls&gt;
      &lt;/ControlLayoutSystem&gt;
    &lt;/SplitLayoutSystem&gt;
  &lt;/DocumentContainer&gt;
&lt;/Layout&gt;</Layout>
  <MainServer>127.0.0.1.1.1</MainServer>
  <Name>Scope Project</Name>
  <RecordTime>300000000</RecordTime>
  <ServerVersions>
    <Version>3.4.3147.16</Version>
  </ServerVersions>
  <SortPriority>100</SortPriority>
  <StopMode>ClientStop</StopMode>
  <SubMember>
    <DataPool AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>253d7fa5-204c-40cd-8522-d7474109f0ec</Guid>
      <Name>DataPool</Name>
      <SortPriority>0</SortPriority>
      <SubMember>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>5.40.72.178.1.1</AmsNetId>
          <Area>Local</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>20000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL64</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>1</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>611395fb-684b-41bb-b0d4-62e7e3935dfc</Guid>
          <IndexGroup>16641</IndexGroup>
          <IndexOffset>65538</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>Mover 1 ActPos</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString></SourceUnitString>
              <Symbol>1</Symbol>
              <TargetUnitString></TargetUnitString>
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>Axes.Mover 1.ActPos</SymbolName>
          <TargetPort>501</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_34</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>8</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>5.40.72.178.1.1</AmsNetId>
          <Area>Local</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>20000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL64</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>2</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>68d0415d-c63c-4efe-9b90-46ab8061a7ea</Guid>
          <IndexGroup>16642</IndexGroup>
          <IndexOffset>65538</IndexOffset>
          <IsHistorical>false</IsHistorical>
          <Name>Mover 2 ActPos</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString></SourceUnitString>
              <Symbol>1</Symbol>
              <TargetUnitString></TargetUnitString>
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubMember />
          <SymbolBased>true</SymbolBased>
          <SymbolName>Axes.Mover 2.ActPos</SymbolName>
          <TargetPort>501</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>AdsAcquisition_34</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>8</VariableSize>
        </AdsAcquisition>
      </SubMember>
      <Title>DataPool_149</Title>
    </DataPool>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-1118478</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-14803426</ForeColor>
      <Guid>d79b11fa-816b-47d6-8191-53d5ea669467</Guid>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>Mover Position</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>10</SortPriority>
      <SubMember>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>c44b0fc8-ee33-49a9-83fb-b2cb42d318f2</Guid>
          <Name>Actual Position</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>d0fed865-ac93-4e9d-8f15-d34219538ce6</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>e62871be-dc40-4d04-b315-e56bc65a82e4</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_153</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>0210d0ab-d32e-4154-a5f6-fce2378aac78</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowOnly</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>8add01fe-c36b-4aeb-b0bc-713420bc8ea2</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>AxisStyle_155</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Value Axis</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>3bd126d2-5d40-4465-a706-bfea85f0959f</Guid>
              <Name>Marker Container</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MarkerContainer_156</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16744448</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>a42afa91-ee84-46f7-845b-675a8e8189fb</Guid>
              <Name>Mover 1 ActPos</Name>
              <SortPriority>10</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>611395fb-684b-41bb-b0d4-62e7e3935dfc</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>a34b19b0-5a66-4601-8169-5bd6a87baa4a</Guid>
                  <Name>Y: Mover 1 ActPos</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString></SourceUnitString>
                      <Symbol>1</Symbol>
                      <TargetUnitString></TargetUnitString>
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_38</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>dc71c88c-2986-42a2-94b8-d827f2ebfe1d</Guid>
                  <Name>Channel Style</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16744448</DisplayColor>
                      <FillColor>838893568</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>e09c52fc-ef00-4adf-b35e-903f40e36e6d</Guid>
                      <LineWidth>1</LineWidth>
                      <MarkColor>-16744448</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_43</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>7ae9319b-f7e1-4bcc-9ecf-7789b636bb76</Guid>
                      <Name>Min/Max Style</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_167</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>bc3a8234-4f4c-420b-8e20-c1cbdf0b5438</Guid>
                      <Name>TimeShiftStyle_168</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_168</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_41</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
              </SubMember>
              <Title>Channel_36</Title>
            </Channel>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16776961</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>909d0652-1a5d-47c4-9ce1-2e97daa9425c</Guid>
              <Name>Mover 2 ActPos</Name>
              <SortPriority>11</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>68d0415d-c63c-4efe-9b90-46ab8061a7ea</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>40524d13-8b97-4b0d-80e6-818de200d513</Guid>
                  <Name>Y: Mover 2 ActPos</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString></SourceUnitString>
                      <Symbol>1</Symbol>
                      <TargetUnitString></TargetUnitString>
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember />
                  <Title>AcquisitionInterpreter_38</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>7c929127-5f16-4169-8a84-0fbc3d5114ff</Guid>
                  <Name>Channel Style (1)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16776961</DisplayColor>
                      <FillColor>838861055</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>a75d273d-a907-4371-80aa-60cd4445b8f2</Guid>
                      <LineWidth>1</LineWidth>
                      <MarkColor>-16776961</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (1)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>SeriesStyle_43</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>06c8b735-bc3e-4b5f-b991-f907ff8c6a5c</Guid>
                      <Name>Min/Max Style (1)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MinMaxStyle_174</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>a70713c4-8c24-4632-9dcd-0a4d96c9f951</Guid>
                      <Name>TimeShiftStyle_175</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>TimeShiftStyle_175</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>ChannelStyle_41</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
              </SubMember>
              <Title>Channel_36</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <ForeColor>-14803426</ForeColor>
          <Guid>3eaf8bb1-f7d5-4e98-aee9-f1b798efe505</Guid>
          <Name>Overview Chart</Name>
          <OverviewVisible>true</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>OverviewChart_157</Title>
        </OverviewChart>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>1e593f6c-41cf-43b7-a39c-8489ae471e1f</Guid>
          <Name>Chart Style</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>false</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>9f04763f-1f81-4d79-b148-1edc721631e4</Guid>
              <Name>Chartzoom Style</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>ChartZoomStyle_159</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>7a7af196-c30d-475e-9734-d35b12108a44</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>ChartMenuStyle_160</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>true</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>ChartStyle_158</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <Guid>96d433bf-3fc7-4831-bd48-bb5b68007355</Guid>
          <Name>Marker Container (1)</Name>
          <SortPriority>100</SortPriority>
          <SubMember />
          <Title>MarkerContainer_176</Title>
        </MarkerContainer>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>YTChart_150</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
    <TriggerModule AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>40e7b06d-da58-40e5-b5d7-064b6a783cfd</Guid>
      <Name>Trigger</Name>
      <SortPriority>10000</SortPriority>
      <SubMember />
      <Title>TriggerModule_161</Title>
    </TriggerModule>
  </SubMember>
  <SynchronisationMode>Default</SynchronisationMode>
  <TargetConnectionIds />
  <Title>ScopeProject_3</Title>
  <UseAutoSave>false</UseAutoSave>
  <UseFileStore>false</UseFileStore>
  <Version>1.0.0.3</Version>
  <ViewDetailLevel>Default</ViewDetailLevel>
</ScopeProject>",
            "CONFIG_PATH": "../../Scope/YT Scope Project.tcscopex",
            "CONFIG_SOURCE": "project"
        }
    },
    "scopeRecords": []
}